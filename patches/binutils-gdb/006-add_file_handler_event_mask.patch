diff -Naurp binutils-gdb.orig/gdb/event-loop.c binutils-gdb.new/gdb/event-loop.c
--- binutils-gdb.orig/gdb/event-loop.c	2018-03-30 19:07:34.688587776 +0200
+++ binutils-gdb.new/gdb/event-loop.c	2018-03-30 19:10:36.494398861 +0200
@@ -37,13 +37,6 @@
 #include "observable.h"
 #include "top.h"
 
-/* Tell create_file_handler what events we are interested in.
-   This is used by the select version of the event loop.  */
-
-#define GDB_READABLE	(1<<1)
-#define GDB_WRITABLE	(1<<2)
-#define GDB_EXCEPTION	(1<<3)
-
 /* Data point to pass to the event handler.  */
 typedef union event_data
 {
@@ -430,12 +423,17 @@ start_event_loop (void)
    doesn't have to know implementation details about the use of poll
    vs. select.  */
 void
-add_file_handler (int fd, handler_func * proc, gdb_client_data client_data)
+add_file_handler (int fd, handler_func * proc, gdb_client_data client_data,
+		  int mask)
 {
 #ifdef HAVE_POLL
   struct pollfd fds;
+  int pollmask = 0;
 #endif
 
+  if (fd < 0 || (mask & (GDB_READABLE | GDB_WRITABLE | GDB_EXCEPTION)) == 0)
+    return;
+
   if (use_poll)
     {
 #ifdef HAVE_POLL
@@ -444,8 +442,15 @@ add_file_handler (int fd, handler_func *
          m68k-motorola-sys, `poll' cannot be used to wait for `stdin'.
          On m68k-motorola-sysv, tty's are not stream-based and not
          `poll'able.  */
+      if (mask & GDB_READABLE)
+        pollmask |= POLLIN | POLLRDHUP;
+      if (mask & GDB_WRITABLE)
+        pollmask |= POLLOUT;
+      if (mask & GDB_EXCEPTION)
+        pollmask |= POLLPRI;
       fds.fd = fd;
-      fds.events = POLLIN;
+      fds.events = pollmask;
+
       if (poll (&fds, 1, 0) == 1 && (fds.revents & POLLNVAL))
 	use_poll = 0;
 #else
@@ -456,15 +461,14 @@ add_file_handler (int fd, handler_func *
   if (use_poll)
     {
 #ifdef HAVE_POLL
-      create_file_handler (fd, POLLIN, proc, client_data);
+      create_file_handler (fd, pollmask, proc, client_data);
 #else
       internal_error (__FILE__, __LINE__,
 		      _("use_poll without HAVE_POLL"));
 #endif
     }
   else
-    create_file_handler (fd, GDB_READABLE | GDB_EXCEPTION, 
-			 proc, client_data);
+    create_file_handler (fd, mask, proc, client_data);
 }
 
 /* Add a file handler/descriptor to the list of descriptors we are
diff -Naurp binutils-gdb.orig/gdb/event-loop.h binutils-gdb.new/gdb/event-loop.h
--- binutils-gdb.orig/gdb/event-loop.h	2018-03-30 19:08:27.752116923 +0200
+++ binutils-gdb.new/gdb/event-loop.h	2018-03-30 19:16:18.058621399 +0200
@@ -70,6 +70,12 @@
 
    Corollary tasks are the creation and deletion of event sources.  */
 
+/* Tell add_file_handler what events we are interested in. */
+
+#define GDB_READABLE	(1<<1)
+#define GDB_WRITABLE	(1<<2)
+#define GDB_EXCEPTION	(1<<3)
+
 typedef void *gdb_client_data;
 struct async_signal_handler;
 struct async_event_handler;
@@ -84,7 +90,8 @@ extern void start_event_loop (void);
 extern int gdb_do_one_event (int mstimeout = -1);
 extern void delete_file_handler (int fd);
 extern void add_file_handler (int fd, handler_func *proc, 
-			      gdb_client_data client_data);
+			      gdb_client_data client_data,
+			      int mask = GDB_READABLE | GDB_EXCEPTION);
 extern struct async_signal_handler *
   create_async_signal_handler (sig_handler_func *proc, 
 			       gdb_client_data client_data);
